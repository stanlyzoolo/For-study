#   Жадные алгоритмы
#   
#   В технической терминологии: на кждом шаге выбирается локально - оптимальное решение,
#   а в итоге вы получаете глобально - оптимальное решение. 
#
#   Приближенные алгоритмы
#   Применяются тогда, когда вычисление точного решения занимает слишком много времени.
#
#   Эффективность приближенного алгоритма оценивается по:
#       - быстроте
#      - близости полученного решения к оптимальному
#
#   Реализация в программном коде
#       
#   Подготовительный код

states_needed = set(["mt","wa","or","id","nv","ut","ca","az"])        # С помощью метода set массив преобразуется в множествао

# Каждый элемент в Множестве может встречаться не более одного раза. Множество не содержит дубликатов.
# Хранение данных во Множествах упрощает работу. 
# Составим список станций из которых будет выбираться покрытие
stations = {}

    # Ключами являются названия станций, значения - сокрашенные обозначения штатов
stations["kone"] = set(["id","nv","ut"])
stations["ktwo"] = set(["wa","id","mt"])
stations["kthree"] = set(["or", "nv", "ca"])
stations["kfour"] = set(["nv","ut"])
stations["kfive"] = set(["ca","az"])

# Создаем множество для хранения итогового набора станций
final_stations = set()

# Перебираем все станции и выбираем ту, котоорая обслуживает больше всего штатов, 
# не входящих в текущее покрытие
best_station = None
states_covered = set()                                               # множество из штатов, которые обслуживаются станцией
for station, states_for_station in stations.items():
    # применяем пересечение множеств для выбора лучшей станции
    covered = states_needed & states_for_station                     # Множество штатов, не входящих в покрытие, которые покрываются текущей станцией   
    if len(covered) > len(states_covered):
        best_station = station
        states_covered = covered
states needed - = states_covered 
final_stations.add(best_station)   

print final_stations

# Объединение множеств означает слияние элементов обоих множеств.
# Под операцией пересечения множеств понимается поиск элементов, входящих в оба множества.
# Под разностью множеств понимается исключение из одного множества элементов, присутствующих в другом множестве.



