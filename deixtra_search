# Алгоритм Дейкстры
# Состоит из четырех шагов:
                          # найти узел с наименьшей стоимостью (то есть узел, до которого можно добраться за минимальное время)
                          # обновить стоимость соседей этого узла
                          # повторять пока это не будет сделано для всех узлов графа
                          # вычислить итоговый путь
                          
# Вес - это число, связанное с ребром графа.

# Граф с весами - взвешенный граф, без весов - невзвешенный граф.

# Для вычисления кратчайшего пути в невзвешенном графе используется Поиск в ширину (BFS, breadth-first search).

# Алгоритм Дейкстры работает только с направленными ациклическими графами (DAG, Direct Acyclic Graph).

# Идея алгоритма Дейкстры - в графе ищется путь с наименьшей стоимостьью. Пути к этому узлу с наименьшими затратами не существует

# Алгоритм не может использоваться при наличии ребер, имеющих отрицательный вес. Такие ребра нарушают работу алгоритма. 

# Реализация

# Подготовка.

graph = {}
graph["start"] = {}           # начальная хеш-таблица
graph['start']['a'] = 6
graph['start']['b'] = 2

graph['a'] = {}               # первая хеш-таблица с данными первой связи
graph['a']['fin'] = 1

graph['b'] = {}               # вторая хеш-таблица с обновленными весами первой хеш-таблицы
graph['b']['a'] = 3
graph['b']['fin'] = 5         # конечный граф связи

graph['fin'] = {}

infinity = float("inf")       # так как стоимость конечного узла неизвестна, его стоимость считается бесконечной
costs = {}                    # хеш-таблица со стоимостями узлов графов
costs['a'] = 6
costs['b'] = 2
costs['fin'] = infinity       

parents = {}                  # код создания хеш - таблицы родителей
parents['a'] ='start'
parents['b'] ='start'
parents['fin'] = None

processed = []                # массив для отслеживания уже обработанных узлов

def find_lowest_cost_node(costs):
    lowest_cost = float("inf")
    lowest_cost_node = None 
    for node in costs:                                   # перебираем все узлы
        cost = costs[node]
        if cost < lowest_cost and node not in processed: # если это узел с наименьшей стоимостью из уже увиденных и он еще не был обработан
            lowest_cost = cost                           # то он назначается новым узлом с наименьшей стоимостью 
            lowest_cost_node = node
    return lowest_cost_node

node = find_lowest_cost_node(costs)       # найти узел с наименьшей стоимостью среди необработанных узлов
while node is not None:
    cost = costs[node]                    # если обработаны все узлы, цикл while завершится
    neighbors = graph[node]
    for n in neighbors.keys():            # перебрать всех соседей текущего узла
        new_cost = cost + neighbors[n]    # если к соседу можно быстрее добраться через текущий узел
        if costs[n] > new_cost:           # добраться через текущий узел
            costs[n] = new_cost           # обновить стоимость для этого узла
            parents[n] = node             # этот узел становится новым родителем для соседа
    processed.append(node)                # узел помечается как обработанный
    node = find_lowest_cost_node(costs)   # найти следующий узел для обработки и повторить цикл
    
print ("Стоимость от начала для каждого узла:")
print (costs)
